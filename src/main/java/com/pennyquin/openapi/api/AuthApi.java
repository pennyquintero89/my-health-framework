/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.pennyquin.openapi.api;

import com.pennyquin.openapi.model.ErrorResponse;
import com.pennyquin.openapi.model.TokenRequest;
import com.pennyquin.openapi.model.TokenResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-08-29T20:36:51.586484600+02:00[Europe/Berlin]", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "Authentication", description = "the Authentication API")
public interface AuthApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /auth/token : Generate OAuth 2.0 access token
     * Authenticate device and generate access token for API access
     *
     * @param tokenRequest (required)
     * @return Authentication successful (status code 200)
     * or Bad request - invalid device ID (status code 400)
     * or Unauthorized - invalid credentials (status code 401)
     */
    @Operation(
            operationId = "authTokenPost",
            summary = "Generate OAuth 2.0 access token",
            description = "Authenticate device and generate access token for API access",
            tags = {"Authentication"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Authentication successful", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = TokenResponse.class), examples = {
                                    @ExampleObject(
                                            name = "",
                                            value = "{\"accessToken\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\"expiresIn\":3600}"
                                    )
                            })

                    }),
                    @ApiResponse(responseCode = "400", description = "Bad request - invalid device ID", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Unauthorized - invalid credentials", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/auth/token",
            produces = {"application/json"},
            consumes = {"application/json"}
    )

    default ResponseEntity<TokenResponse> authTokenPost(
            @Parameter(name = "TokenRequest", description = "", required = true) @Valid @RequestBody TokenRequest tokenRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expiresIn\" : 3600, \"accessToken\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"INVALID_REQUEST\", \"message\" : \"Invalid device ID provided\", \"timestamp\" : \"2024-03-15T10:30:00Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"INVALID_REQUEST\", \"message\" : \"Invalid device ID provided\", \"timestamp\" : \"2024-03-15T10:30:00Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
