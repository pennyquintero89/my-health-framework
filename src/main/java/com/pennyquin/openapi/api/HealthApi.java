/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.pennyquin.openapi.api;

import com.pennyquin.openapi.model.ErrorResponse;
import com.pennyquin.openapi.model.HealthDataRequest;
import com.pennyquin.openapi.model.SuccessResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-08-29T20:36:51.586484600+02:00[Europe/Berlin]", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "Health Data", description = "the Health Data API")
public interface HealthApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /health/data : Submit health tracking data
     * Submit daily health metrics including steps, active minutes, and calories burned
     *
     * @param healthDataRequest (required)
     * @return Health data submitted successfully (status code 200)
     * or Bad request - invalid data format (status code 400)
     * or Unauthorized - invalid or expired token (status code 401)
     * or Unprocessable entity - validation errors (status code 422)
     */
    @Operation(
            operationId = "healthDataPost",
            summary = "Submit health tracking data",
            description = "Submit daily health metrics including steps, active minutes, and calories burned",
            tags = {"Health Data"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Health data submitted successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = SuccessResponse.class), examples = {
                                    @ExampleObject(
                                            name = "",
                                            value = "{\"message\":\"Health data submitted successfully\"}"
                                    )
                            })

                    }),
                    @ApiResponse(responseCode = "400", description = "Bad request - invalid data format", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Unauthorized - invalid or expired token", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
                    }),
                    @ApiResponse(responseCode = "422", description = "Unprocessable entity - validation errors", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/health/data",
            produces = {"application/json"},
            consumes = {"application/json"}
    )

    default ResponseEntity<SuccessResponse> healthDataPost(
            @Parameter(name = "HealthDataRequest", description = "", required = true) @Valid @RequestBody HealthDataRequest healthDataRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Health data submitted successfully\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"INVALID_REQUEST\", \"message\" : \"Invalid device ID provided\", \"timestamp\" : \"2024-03-15T10:30:00Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"INVALID_REQUEST\", \"message\" : \"Invalid device ID provided\", \"timestamp\" : \"2024-03-15T10:30:00Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"INVALID_REQUEST\", \"message\" : \"Invalid device ID provided\", \"timestamp\" : \"2024-03-15T10:30:00Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
